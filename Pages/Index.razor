@page "/"

@using Models
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@using System.Diagnostics
@using Classes

@inject vswebsiteContext _context

<div style="width: 100%; text-align: center;"><h2>Top Players</h2></div>
<div class="dashboardItem">
    <div class="profileContent" style="box-shadow: 0px 2px 3px 1px rgba(0,0,0,0.59);">
        <MudTable Items="@topPlayers" Dense="true" Hover="true" FixedHeader="true">
            <HeaderContent>
                <MudTh>Place</MudTh>
                <MudTh>User</MudTh>
                <MudTh>Points</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="User">@(topPlayers.IndexOf(@context) + 1)</MudTd>
                <MudTd DataLabel="User"><a href=@("/Profile?id=" + @context.User.Id)>@context.User.DisplayName</a></MudTd>
                <MudTd DataLabel="User">@context.Points</MudTd>
            </RowTemplate>
        </MudTable>
    </div>
</div>
<br />
<br />
<div style="width: 100%; text-align: center;"><h2>Newest Submissions</h2></div>
<div class="dashboardItem">
    <div class="profileContent" style="box-shadow: 0px 2px 3px 1px rgba(0,0,0,0.59);">
        <MudTable Items="@recentSubmissions" Dense="true" Hover="true" FixedHeader="true">
            <HeaderContent>
                <MudTh>User</MudTh>
                <MudTh>Character</MudTh>
                <MudTh>Stage</MudTh>
                <MudTh>Kills</MudTh>
                <MudTh>Level</MudTh>
                <MudTh>Gold</MudTh>
                <MudTh>Survived Time</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="User"><a href=@("/Profile?id=" + @context.User.Id)>@context.User.DisplayName</a></MudTd>
                <MudTd DataLabel="Character">@context.Character.Name</MudTd>
                <MudTd DataLabel="Stage">@context.Stage.Name</MudTd>
                <MudTd DataLabel="Kills">@context.Kills</MudTd>
                <MudTd DataLabel="Level">@context.Level</MudTd>
                <MudTd DataLabel="Gold">@context.Gold</MudTd>
                <MudTd DataLabel="Survived Time">@context.SurvivedTime</MudTd>
                <MudTd DataLabel=""><a href=@("/Entry?id=" + @context.Id)>View</a></MudTd>
            </RowTemplate>
        </MudTable>
    </div>
</div>



@code {

	static readonly List<int> pointsAwarded = new List<int> { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
	bool isAdmin;
	List<Entry> recentSubmissions = new List<Entry>();
	List<CompositeStats> topPlayers = new List<CompositeStats>();

	static readonly string thickSeparator = new string('=', 15);
	static readonly string thinSeparator = new string('-', 15);

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationStateTask;
		var user = authState.User;
		var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
		User chkUser = _context.Users.Where(w => w.UserKey == userId).FirstOrDefault();
		if (chkUser != null) isAdmin = chkUser.Admin;

		int topN = 10;
		recentSubmissions = await GetRecentSubmissions();
		var stages = _context.Stages.ToList();

		// Main brunt of work. Add profiling around here as it's an important piece.
		// CalculatePoints itself has some internal profiling as well.
		Debug.WriteLine(thickSeparator);
		var profileCalculatePoints = Stopwatch.StartNew();

		topPlayers = CalculatePoints(topN, stages);

		profileCalculatePoints.Stop();
		Debug.WriteLine(thinSeparator);
		DebugDumpProfiles(new Dictionary<string, TimeSpan>
		{
			{ "Total: Calculate points", profileCalculatePoints.Elapsed }
		});
		Debug.WriteLine(thickSeparator);
	}

	private List<Entry> RemoveDupes(List<Entry> records)
	{
		Dictionary<User, int> nameCheck = new Dictionary<User, int>();
		List<Entry> newList = new List<Entry>();
		for (int i = 0; i < records.Count; i++)
		{
			if (!nameCheck.ContainsKey(records[i].User))
			{
				Entry newEntry = _context.Entries.Where(w => w.Id == records[i].Id).First();
				newList.Add(newEntry);
				nameCheck.Add(records[i].User, records[i].Id);
			}
		}
		return newList;
	}

	private async Task<List<Entry>> GetRecentSubmissions()
	{
		var entries = await _context.Entries
			.Include(i => i.User)
			.Include(i => i.Stage)
			.Include(i => i.Character)
			.Where(w => w.Approved == true && w.Deleted == false)
			.OrderByDescending(o => o.DateSubmitted)
			.Take(10)
			.ToListAsync();

		return entries;
	}
	private List<CompositeStats> CalculatePoints(int topN, List<Stage> stages)
	{
		Stopwatch profileGetStageEntries = new Stopwatch();
		Stopwatch profileCreateRecords = new Stopwatch();
		Stopwatch profileTallies = new Stopwatch();

		List<Entry> records = new List<Entry>();
		Dictionary<User, int> playerPoints = new Dictionary<User, int>();

		int stageCount = stages.Count;

		for (int stageId = 1; stageId < stageCount + 1; stageId++)
		{
			//Trace.WriteLine($"========Stage: {stages[stageID-1].Name}");

			// TODO: Stage selection may not scale well as people continue to submit entries.
			// TODO: Ideally, we could pass some more criteria to help limit the growth of what would be returned here,
			// TODO: but I have not yet looked at all the properties we have and what we could join against to offload work to the DB
			// TODO: before bringing data back to client-side.
			profileGetStageEntries.Start();
			var allStageEntries = _context.Entries.Include(i => i.User)
				.Where(entry => entry.StageId == stageId && entry.Approved == true && entry.Deleted == false)
				.ToList();
			profileGetStageEntries.Stop();

			profileCreateRecords.Start();
			var killRecords = CreateRecords(allStageEntries, entry => entry.Kills).Take(topN).ToList();
			var goldRecords = CreateRecords(allStageEntries, entry => entry.Gold).Take(topN).ToList();
			var levelRecords = CreateRecords(allStageEntries, entry => entry.Level).Take(topN).ToList();
			var timeRecords = CreateRecords(allStageEntries, entry => entry.SurvivedTime).Take(topN).ToList();
			profileCreateRecords.Stop();

			//DebugDumpTopNRecords(stages[stageId-1], killRecords, "Kills", entry => entry.Kills);
			//DebugDumpTopNRecords(stages[stageId-1], goldRecords, "Gold", entry => entry.Gold);
			//DebugDumpTopNRecords(stages[stageId-1], levelRecords, "Level", entry => entry.Level);
			//DebugDumpTopNRecords(stages[stageId-1], timeRecords, "Time", entry => entry.SurvivedTime);

			profileTallies.Start();
			AddTally(killRecords, playerPoints);
			AddTally(goldRecords, playerPoints);
			AddTally(levelRecords, playerPoints);
			AddTally(timeRecords, playerPoints);
			profileTallies.Stop();
		}

		var profileGetTopPlayers = Stopwatch.StartNew();
		var topPlayers = (from playerResult in playerPoints
								orderby playerResult.Value descending
								select new CompositeStats
			{
				User = playerResult.Key,
				Points = playerResult.Value
			})
			.Take(topN)
			.ToList();
		profileGetTopPlayers.Stop();

		DebugDumpProfiles(new Dictionary<string, TimeSpan>
		{
			{ "Step: Get stage entries", profileGetStageEntries.Elapsed },
			{ "Step: Create records", profileCreateRecords.Elapsed },
			{ "Step: Tallies", profileTallies.Elapsed },
			{ "Step: Get top players", profileGetTopPlayers.Elapsed }
		});

		return topPlayers;
	}

	/// <summary>
	/// Creates records for a given stage and stat.
	/// </summary>
	/// <typeparam name="T"></typeparam>
	/// <param name="stat"></param>
	/// <param name="statSelector"></param>
	/// <returns></returns>
	IEnumerable<Entry> CreateRecords<T>(List<Entry> allStageEntries, Func<Entry, T> statSelector)
	{
		var records = allStageEntries
			.GroupBy(
				entry => entry.UserId,
				(userId, group) => group.OrderByDescending(statSelector).First()
			)
			.OrderByDescending(statSelector)
			// These following sorts are needed for accuracy and consistency.
			.ThenByDescending(entry => entry.DateSubmitted)
			// TODO: Not sure how this behaves with unicode names and the like, but it should prove consistent at the least.
			.ThenBy(entry => entry.User.Name);

		return records;
	}

	/// <summary>
	/// Handles adding points for a user based on their rank within the set of ordered entries.
	/// </summary>
	/// <param name="entries">A list of entries whose length is already clamped to the desired amount, such as the topN relevant entries.</param>
	/// <param name="playerPoints">A dictionary containing a user key and the points accumulate for that user.</param>
	void AddTally(List<Entry> entries, Dictionary<User, int> playerPoints)
	{
		foreach(var (entry, idx) in entries.Select((entry, idx) => (entry, idx)))
		{
			var user = entry.User;
			if (user != null)
			{
				if (playerPoints.ContainsKey(user))
				{
					playerPoints[user] += pointsAwarded[idx];
				}
				else
				{
					playerPoints.Add(user, pointsAwarded[idx]);
				}

				//Debug.WriteLine(user.Name + " + " + pointsAwarded[idx].ToString());
			}
			else
			{
				Debug.WriteLine("How the fuck did this happen?");
			}
		}
	}

	void DebugDumpTopNRecords<T>(Stage stage, List<Entry> entries, string stat, Func<Entry, T> statSelector)
	{
		var offset = entries.Max(entry => entry.User.Name.Length);
		var formattedRecordEntry = "Record holder: {0,-" + offset + "}\t{1}: {2}";

		Debug.WriteLine($"========{stage.Name}========");
		foreach(var entry in entries)
		{
			Debug.WriteLine(formattedRecordEntry, entry.User.Name, stat, statSelector(entry));
		}
		Debug.WriteLine($"===================");
	}

	void DebugDumpProfiles(Dictionary<string, TimeSpan> profileResults)
	{
		var offset = profileResults.Max(x => x.Key.Length);
		var formattedProfileEntry = "{0,-" + offset + "}\t{1}";

		foreach(var (step, result) in profileResults)
		{
			Debug.WriteLine(formattedProfileEntry, step, result);
		}
	}
}
