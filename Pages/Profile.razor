@page "/Profile"

@using Models
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Diagnostics;
@using Classes;

@inject NavigationManager NavManager
@inject vswebsiteContext _context

<style>
</style>

@if (Loading)
{
    <h3>Data Loading</h3>
}
else
{
    @if (user != null)
    {
        <div class="RankingContainer">
            @foreach (StageRankings stageRank in rankings)
            {
                <div class="RankingCard">
                    <div style="padding-left: 10px; display: flex; align-items: center; padding-right: 2px;">
                        @if (stageRank.Ranking == 1)
                        {
                            <img src="/images/gold.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@stageRank.Ranking)</span>
                        }
                        else if (stageRank.Ranking == 2)
                        {
                            <img src="/images/silver.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@stageRank.Ranking)</span>
                        }
                        else if (stageRank.Ranking == 3)
                        {
                            <img src="/images/bronze.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@stageRank.Ranking)</span>
                        }
                        else
                        {
                            @if (stageRank.Ranking > 0)
                            {
                                <span>@_helper.GetOrdinalSuffix(@stageRank.Ranking)</span>
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        }
                    </div>
                    <div style="padding-left: 10px; text-align: center; flex-grow: 1; background-color:#272323; color: #fff; border: 2px solid #594ae2ff;  ">
                        <span style="font-weight: bold; font-size: 1.1em;">@stageRank.StageName</span>
                    </div>
                </div>
            }
        </div>
        <br />
        <div class="profileSection">
            <div class="profileTop"></div>
            <div class="profileTitle">
                @user.DisplayName -
                @if (overall.Ranking == 1)
                {
                    <img src="/images/gold.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@overall.Ranking)</span>
                }
                else if (overall.Ranking == 2)
                {
                    <img src="/images/silver.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@overall.Ranking)</span>
                }
                else if (overall.Ranking == 3)
                {
                    <img src="/images/bronze.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@overall.Ranking)</span>
                }
                else if (overall.Ranking == 0)
                {
                    <span>N/A</span>
                }
                else
                {
                    @_helper.GetOrdinalSuffix(@overall.Ranking)
                }
            </div>
            <div class="profileContent">
                @if (entries != null)
                {
                    <MudTable Items="@entries" Dense="true" Hover="true" FixedHeader="true">
                        <HeaderContent>
                            <MudTh>Stage</MudTh>
                            <MudTh>Kills</MudTh>
                            <MudTh>Level</MudTh>
                            <MudTh>Gold</MudTh>
                            <MudTh>Survived Time</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Stage">@context.StageName </MudTd>
                            <MudTd DataLabel="Kills">
                                @context.Kills
                                @if (context.KillsPlace == "1st")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/gold.png" height="16" width="16" /><sup> @context.KillsPlace</sup>
                                            }
                                            else if (context.KillsPlace == "2nd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/silver.png" height="16" width="16" /><sup> @context.KillsPlace</sup>
                                            }
                                            else if (context.KillsPlace == "3rd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/bronze.png" height="16" width="16" /><sup> @context.KillsPlace</sup>
                                            }
                                            else
                                            {
                                    <sup style="margin-left: 5px;"> @context.KillsPlace</sup>
                                            }
                            </MudTd>
                            <MudTd DataLabel="Level">
                                @context.Level
                                @if (context.LevelPlace == "1st")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/gold.png" height="16" width="16" /><sup> @context.LevelPlace</sup>
                                            }
                                            else if (context.LevelPlace == "2nd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/silver.png" height="16" width="16" /><sup> @context.LevelPlace</sup>
                                            }
                                            else if (context.LevelPlace == "3rd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/bronze.png" height="16" width="16" /><sup> @context.LevelPlace</sup>
                                            }
                                            else
                                            {
                                    <sup style="margin-left: 5px;"> @context.LevelPlace</sup>
                                            }
                            </MudTd>
                            <MudTd DataLabel="Gold">
                                @context.Gold
                                @if (context.GoldPlace == "1st")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/gold.png" height="16" width="16" /><sup> @context.GoldPlace</sup>
                                            }
                                            else if (context.GoldPlace == "2nd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/silver.png" height="16" width="16" /><sup> @context.GoldPlace</sup>
                                            }
                                            else if (context.GoldPlace == "3rd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/bronze.png" height="16" width="16" /><sup> @context.GoldPlace</sup>
                                            }
                                            else
                                            {
                                    <sup style="margin-left: 5px;"> @context.GoldPlace</sup>
                                            }
                            </MudTd>
                            <MudTd DataLabel="Survived Time">
                                @context.TimeSurvived
                                @if (context.TimePlace == "1st")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px;" src="/images/gold.png" height="16" width="16" /><sup> @context.TimePlace</sup>
                                            }
                                            else if (context.TimePlace == "2nd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/silver.png" height="16" width="16" /><sup> @context.TimePlace</sup>
                                            }
                                            else if (context.TimePlace == "3rd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/bronze.png" height="16" width="16" /><sup> @context.TimePlace</sup>
                                            }
                                            else
                                            {
                                    <sup style="margin-left: 5px;"> @context.TimePlace</sup>
                                            }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <h3>No Data</h3>
                }
            </div>
            <div class="profileFooter"></div>
        </div>
    }
    else
    {
        <h2>User does not exist.</h2>
    }
}


@code {
    List<ProfileStats> entries = new List<ProfileStats>();
    public List<StageRankings> rankings = new List<StageRankings>();
    List<Entry> records = new List<Entry>();

    Helpers _helper = new Helpers();
    StageRankings overall = new StageRankings();
    User user;

    bool Loading = true;

    public class TotalRuns
    {
        public string StageName { get; set; }
        public int Runs { get; set; }
    }

    public class ProfileStats
    {
        public string StageName { get; set; }
        public int Kills { get; set; }
        public int Gold { get; set; }
        public int Level { get; set; }
        public double TimeSurvived { get; set; }
        public string KillsPlace { get; set; }
        public string GoldPlace { get; set; }
        public string LevelPlace { get; set; }
        public string TimePlace { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        List<Stage> stages = await _context.Stages.ToListAsync();
        int stageCount = stages.Count;

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _id))
        {
            user = await _context.Users.Where(w => w.Id == Convert.ToInt32(_id)).FirstOrDefaultAsync();

            if (Convert.ToInt32(_id) > 0)
            {
                for (int i = 1; i < stageCount + 1; i++)
                {
                    ProfileStats stats = new ProfileStats();
                    List<Entry> entryList = await _context.Entries.Where(w => w.StageId == i &&
                        w.UserId == user.Id && w.Approved == true && w.Deleted == false)
                        .OrderByDescending(o => o.Gold)
                        .ToListAsync();
                    if (entryList.Count > 0)
                    {
                        Stage currentStage = await _context.Stages.Where(w => w.Id == i).FirstAsync();
                        stats.StageName = currentStage.Name;

                        // Get Gold Value
                        var goldRecords = _context.Entries
                            .Where(w => w.StageId == i && w.Approved == true && w.Deleted == false)
                            .OrderByDescending(o => o.Gold)
                            .ToList()
                            .GroupBy(g => (g.UserId))
                            .Select(s => s.First()).ToList();

                        if (entryList != null)
                        {
                            stats.Gold = entryList.Max(m => m.Gold);
                            stats.GoldPlace = _helper.GetOrdinalSuffix((goldRecords.FindIndex(i => i.UserId == user.Id)) + 1);
                        }
                        else
                        {
                            stats.Gold = 0;
                            stats.GoldPlace = "NA";
                        }


                        // Get Kill Value
                        entryList = await _context.Entries.Where(w => w.StageId == i &&
                        w.UserId == user.Id && w.Approved == true && w.Deleted == false)
                        .OrderByDescending(o => o.Kills)
                        .ToListAsync();

                        var killsRecords = _context.Entries
                            .Where(w => w.StageId == i && w.Approved == true && w.Deleted == false)
                            .OrderByDescending(o => o.Kills)
                            .ToList()
                            .GroupBy(g => (g.UserId))
                            .Select(s => s.First()).ToList();

                        if (entryList != null)
                        {
                            stats.Kills = entryList.Max(m => m.Kills);
                            stats.KillsPlace = _helper.GetOrdinalSuffix((killsRecords.FindIndex(i => i.UserId == user.Id)) + 1);
                        }
                        else
                        {
                            stats.Kills = 0;
                            stats.KillsPlace = "NA";
                        }

                        // Get Level Value
                        entryList = await _context.Entries.Where(w => w.StageId == i &&
                        w.UserId == user.Id && w.Approved == true && w.Deleted == false)
                        .OrderByDescending(o => o.Level)
                        .ToListAsync();

                        var levelRecords = _context.Entries
                            .Where(w => w.StageId == i && w.Approved == true && w.Deleted == false)
                            .OrderByDescending(o => o.Level)
                            .ToList()
                            .GroupBy(g => (g.UserId))
                            .Select(s => s.First()).ToList();

                        if (entryList != null)
                        {
                            stats.Level = entryList.Max(m => m.Level);
                            stats.LevelPlace = _helper.GetOrdinalSuffix((levelRecords.FindIndex(i => i.UserId == user.Id)) + 1);
                        }
                        else
                        {
                            stats.Level = 0;
                            stats.LevelPlace = "NA";
                        }

                        // Get Time Value
                        entryList = await _context.Entries.Where(w => w.StageId == i &&
                        w.UserId == user.Id && w.Approved == true && w.Deleted == false)
                        .OrderByDescending(o => o.SurvivedTime)
                        .ToListAsync();

                        var timeRecords = _context.Entries
                            .Where(w => w.StageId == i && w.Approved == true && w.Deleted == false)
                            .OrderByDescending(o => o.SurvivedTime)
                            .ToList()
                            .GroupBy(g => (g.UserId))
                            .Select(s => s.First()).ToList();

                        if (entryList != null)
                        {
                            stats.TimeSurvived = Convert.ToDouble(entryList.Max(m => m.SurvivedTime));
                            stats.TimePlace = _helper.GetOrdinalSuffix((timeRecords.FindIndex(i => i.UserId == user.Id)) + 1);
                        }
                        else
                        {
                            stats.TimeSurvived = 0;
                            stats.TimePlace = "NA";
                        }

                        entries.Add(stats);
                    }
                }
            }

            foreach (Stage stage in stages)
            {
                rankings.Add(_helper.GetStageRanking(stage.Id, user));
            };

            overall = _helper.GetTotalRanking(user);

            Loading = false;
            StateHasChanged();
        }

    }

    private async Task<List<Entry>> RemoveDupes(List<Entry> records)
    {
        if (records != null && records.Count > 0)
        {
            Dictionary<User, int> nameCheck = new Dictionary<User, int>();
            List<Entry> newList = new List<Entry>();
            for (int i = 0; i < records.Count; i++)
            {
                if (!nameCheck.ContainsKey(records[i].User))
                {
                    Entry newEntry = await _context.Entries.Where(w => w.Id == records[i].Id).FirstAsync();
                    newList.Add(newEntry);
                    nameCheck.Add(records[i].User, records[i].Id);
                }
            }
            return newList;
        }
        return new List<Entry>();
    }
}
