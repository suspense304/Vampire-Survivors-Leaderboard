@page "/Profile"

@using Models
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Diagnostics;
@using Classes;
@using Data

@inject PageTitle _pageTitle
@inject NavigationManager NavManager
@inject vswebsiteContext _context

<style>
</style>

@if (Loading)
{
    <h3>Data Loading</h3>
}
else
{
    @if (user != null)
    {
        <div class="RankingContainer" style="flex-wrap:wrap;">
            @foreach (StageRankings stageRank in rankings)
            {
                <div class="RankingCard">
                    <div style="padding-left: 10px; display: flex; align-items: center; padding-right: 2px;">
                        @if (stageRank.Ranking == 1)
                        {
                            <img src="/images/gold.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@stageRank.Ranking)</span>
                        }
                        else if (stageRank.Ranking == 2)
                        {
                            <img src="/images/silver.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@stageRank.Ranking)</span>
                        }
                        else if (stageRank.Ranking == 3)
                        {
                            <img src="/images/bronze.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@stageRank.Ranking)</span>
                        }
                        else
                        {
                            @if (stageRank.Ranking > 0)
                            {
                                <span>@_helper.GetOrdinalSuffix(@stageRank.Ranking)</span>
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        }
                    </div>
                    <div style="padding-left: 10px; text-align: center; flex-grow: 1; background-color:#272323; color: #fff; border: 2px solid #594ae2ff;  ">
                        <span style="font-weight: bold; font-size: 1.1em;">@stageRank.StageName</span>
                    </div>
                </div>
            }
        </div>
        <br />
        <div class="profileSection">
            <div class="profileTop"></div>
            <div class="profileTitle">
                @user.DisplayName -
                @if (overall.Ranking == 1)
                {
                    <img src="/images/gold.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@overall.Ranking)</span>
                }
                else if (overall.Ranking == 2)
                {
                    <img src="/images/silver.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@overall.Ranking)</span>
                }
                else if (overall.Ranking == 3)
                {
                    <img src="/images/bronze.png" height="16" width="16" /><span style="margin-left: 3px;"> @_helper.GetOrdinalSuffix(@overall.Ranking)</span>
                }
                else if (overall.Ranking == 0)
                {
                    <span>N/A</span>
                }
                else
                {
                    @_helper.GetOrdinalSuffix(@overall.Ranking)
                }
            </div>
            <div class="profileContent">
                @if (entries != null)
                {
                    <MudTable Items="@entries" Dense="true" Hover="true" FixedHeader="true">
                        <HeaderContent>
                            <MudTh>Stage</MudTh>
                            <MudTh>Kills</MudTh>
                            <MudTh>Level</MudTh>
                            <MudTh>Gold</MudTh>
                            <MudTh>Survived Time</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Stage">@context.StageName </MudTd>
                            <MudTd DataLabel="Kills">
                                @context.Kills
                                @if (context.KillsPlace == "1st")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/gold.png" height="16" width="16" /><sup> @context.KillsPlace</sup>
                                            }
                                            else if (context.KillsPlace == "2nd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/silver.png" height="16" width="16" /><sup> @context.KillsPlace</sup>
                                            }
                                            else if (context.KillsPlace == "3rd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/bronze.png" height="16" width="16" /><sup> @context.KillsPlace</sup>
                                            }
                                            else
                                            {
                                    <sup style="margin-left: 5px;"> @context.KillsPlace</sup>
                                            }
                            </MudTd>
                            <MudTd DataLabel="Level">
                                @context.Level
                                @if (context.LevelPlace == "1st")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/gold.png" height="16" width="16" /><sup> @context.LevelPlace</sup>
                                            }
                                            else if (context.LevelPlace == "2nd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/silver.png" height="16" width="16" /><sup> @context.LevelPlace</sup>
                                            }
                                            else if (context.LevelPlace == "3rd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/bronze.png" height="16" width="16" /><sup> @context.LevelPlace</sup>
                                            }
                                            else
                                            {
                                    <sup style="margin-left: 5px;"> @context.LevelPlace</sup>
                                            }
                            </MudTd>
                            <MudTd DataLabel="Gold">
                                @context.Gold
                                @if (context.GoldPlace == "1st")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/gold.png" height="16" width="16" /><sup> @context.GoldPlace</sup>
                                            }
                                            else if (context.GoldPlace == "2nd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/silver.png" height="16" width="16" /><sup> @context.GoldPlace</sup>
                                            }
                                            else if (context.GoldPlace == "3rd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/bronze.png" height="16" width="16" /><sup> @context.GoldPlace</sup>
                                            }
                                            else
                                            {
                                    <sup style="margin-left: 5px;"> @context.GoldPlace</sup>
                                            }
                            </MudTd>
                            <MudTd DataLabel="Survived Time">
                                @context.TimeSurvived
                                @if (context.TimePlace == "1st")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px;" src="/images/gold.png" height="16" width="16" /><sup> @context.TimePlace</sup>
                                            }
                                            else if (context.TimePlace == "2nd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/silver.png" height="16" width="16" /><sup> @context.TimePlace</sup>
                                            }
                                            else if (context.TimePlace == "3rd")
                                            {
                                    <img style="margin-left: 5px; margin-right: 5px" src="/images/bronze.png" height="16" width="16" /><sup> @context.TimePlace</sup>
                                            }
                                            else
                                            {
                                    <sup style="margin-left: 5px;"> @context.TimePlace</sup>
                                            }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <h3>No Data</h3>
                }
            </div>
            <div class="profileFooter"></div>
        </div>
    }
    else
    {
        <h2>User does not exist.</h2>
    }
}


@code {
	// TODO: Note to self: Records should only be in relation to the top records for a person.
	// TODO: It should not be like an arcade where a user could hold different places in the score list.

	List<ProfileStats> entries = new List<ProfileStats>();
	public List<StageRankings> rankings = new List<StageRankings>();
	List<Entry> records = new List<Entry>();

	Helpers _helper = new Helpers();
	StageRankings overall = new StageRankings();
	User user;

	bool Loading = true;

	public class TotalRuns
	{
		public string StageName { get; set; }
		public int Runs { get; set; }
	}

	public class ProfileStats
	{
		public string StageName { get; set; }
		public int Kills { get; set; }
		public int Gold { get; set; }
		public int Level { get; set; }
		public double TimeSurvived { get; set; }
		public string KillsPlace { get; set; }
		public string GoldPlace { get; set; }
		public string LevelPlace { get; set; }
		public string TimePlace { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		_pageTitle.SetTitle("Profile");
		List<Stage> stages = await _context.Stages.ToListAsync();
		int stageCount = stages.Count;

		var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _id))
		{
			user = await _context.Users.Where(w => w.Id == Convert.ToInt32(_id)).FirstOrDefaultAsync();

			if (user != null)
			{
				// TODO: Hmm, there are various places where we get all entries, so right now, not too concerned.
				// TODO: But, entries are always growing, so, this could easily become overwhelming with more popularity.
				var allEntries = _context.Entries.Include(entry => entry.User)
					.Where(entry =>
							entry.Approved == true && entry.Deleted == false
							&& entry.Limitless == false
					)
					.ToList();

				for (int stageId = 1; stageId < stageCount + 1; stageId++)
				{
					ProfileStats stats = new ProfileStats();

					var allStageEntries = allEntries
						.Where(entry => entry.StageId == stageId)
						.ToList();

					var currentStage = stages.First(stage => stage.Id == stageId);
					stats.StageName = currentStage.Name;

					if(allStageEntries.Count > 0)
					{
						var (bestKillsRecord, bestKillsRank) = BestRecord(allStageEntries, user.Id, entry => entry.Kills);
						var (bestGoldRecord, bestGoldRank) = BestRecord(allStageEntries, user.Id, entry => entry.Gold);
						var (bestLevelRecord, bestLevelRank) = BestRecord(allStageEntries, user.Id, entry => entry.Level);
						var (bestTimeRecord, bestTimeRank) = BestRecord(allStageEntries, user.Id, entry => entry.SurvivedTime);

						stats.Kills = bestKillsRecord?.Kills ?? 0;
						stats.KillsPlace = _helper.GetOrdinalSuffix(bestKillsRank);

						stats.Gold = bestGoldRecord?.Gold ?? 0;
						stats.GoldPlace = _helper.GetOrdinalSuffix(bestGoldRank);

						stats.Level = bestLevelRecord?.Level ?? 0;
						stats.LevelPlace = _helper.GetOrdinalSuffix(bestLevelRank);

						// TODO: How come time is a double instead of a TimeSpan?
						stats.TimeSurvived = Convert.ToDouble(bestTimeRecord?.SurvivedTime ?? 0m);
						stats.TimePlace = _helper.GetOrdinalSuffix(bestTimeRank);

						entries.Add(stats);
					}

					rankings.Add(_helper.GetStageRanking(currentStage.Name, allStageEntries, user));
				}
				
				overall = _helper.GetOverallRanking(user, allEntries, stages);
			}

			Loading = false;
			StateHasChanged();
		}

	}

	private async Task<List<Entry>> RemoveDupes(List<Entry> records)
	{
		if (records != null && records.Count > 0)
		{
			Dictionary<User, int> nameCheck = new Dictionary<User, int>();
			List<Entry> newList = new List<Entry>();
			for (int i = 0; i < records.Count; i++)
			{
				if (!nameCheck.ContainsKey(records[i].User))
				{
					Entry newEntry = await _context.Entries.Where(w => w.Id == records[i].Id).FirstAsync();
					newList.Add(newEntry);
					nameCheck.Add(records[i].User, records[i].Id);
				}
			}
			return newList;
		}
		return new List<Entry>();
	}


	public (Entry, int?) BestRecord<T>(List<Entry> allStageEntries, int userId, Func<Entry, T> statSelector)
	{
		// We'll start by ordering all our entries by the stat we're interested in.
		// Then, we just find the first entry corresponding to the given user.
		// Since this is an ordered list now, the index corresponds to their rank.

		var orderedStageEntries = allStageEntries
			.OrderByDescending(statSelector)
			.ToList();

		var userBestRecordIdx = orderedStageEntries.FindIndex(entry => entry.UserId == userId);
		if (userBestRecordIdx >= 0)
		{
			var userBestRecord = orderedStageEntries.ElementAt(userBestRecordIdx);
			return (userBestRecord, userBestRecordIdx + 1);
		}

		return (null, null);
	}
}
