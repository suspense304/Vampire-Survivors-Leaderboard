@using Microsoft.EntityFrameworkCore;
@using Models
@using System.Security.Claims
@using Microsoft.Extensions.Configuration
@using System.IO

@inject vswebsiteContext _context
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

@page "/Submit"


@if (loggedIn)
{
    <h3>Submit Run</h3>
    <br />
    <br />

    <EditForm Model="@entry" OnValidSubmit="@SubmitEntry">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h3>Run Info</h3>
        <MudGrid Style="width: 600px;">
            <MudItem xs="12" sm="4" md="4">
                <MudItem xs="12">
                    <MudSelect @bind-Value="entry.StageId" Label="Stage" FullWidth="false" Style="width: 100px;">
                        @if (entry.Stage != null)
                            {
                            <MudSelectItem Value="@entry.StageId">@entry.Stage.Name</MudSelectItem>
                            }
                            else
                            {
                            <MudSelectItem Value="0">None</MudSelectItem>
                            }
                        @foreach (var stage in stages)
                            {
                            <MudSelectItem Value="@stage.Id">@stage.Name</MudSelectItem>
                            }
                    </MudSelect>
                </MudItem>
            </MudItem>
            <MudItem xs="12" sm="4" md="4">
                <MudItem xs="12">
                    <MudSelect @bind-Value="entry.CharacterId" Label="Character" FullWidth="false">
                        @if (entry.Character != null)
                            {
                            <MudSelectItem Value="@entry.CharacterId">@entry.Character.Name</MudSelectItem>
                            }
                            else
                            {
                            <MudSelectItem Value="0">None</MudSelectItem>
                            }
                        @foreach (var character in characters)
                            {
                            <MudSelectItem Value="@character.Id">@character.Name</MudSelectItem>
                            }
                    </MudSelect>
                </MudItem>
            </MudItem>
        </MudGrid>
        <br />
        <h3>Stats</h3>
        <br />
        <hr />
        <br />
        <MudGrid Style="width: 800px;">
            <MudItem xs="12" sm="6" md="3">
                <MudTextField T="Int32" Label="Kills" Variant="Variant.Outlined" @bind-Value="@entry.Kills" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField T="Int32" Label="Gold" Variant="Variant.Outlined" @bind-Value="@entry.Gold" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField T="Int32" Label="Level" Variant="Variant.Outlined" @bind-Value="@entry.Level" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField T="Decimal" Label="Survived" Variant="Variant.Outlined" @bind-Value="@entry.SurvivedTime" />
            </MudItem>
        </MudGrid>
        <br />
        <h3>Proof</h3>
        <br />
        <hr />
        <br />
        <MudGrid Style="width: 800px;">
            <MudItem xs="12" sm="12" md="12">
                <MudTextField T="String" Label="Video" Variant="Variant.Outlined" @bind-Value="@entry.Video" Style="width: 500px;" />
            </MudItem>
        </MudGrid>
        <br />
        <br />

        <MudGrid Style="width: 800px;">
            @if (ImageUrl != "")
            {
                <img src="@ImageUrl" />
                <br /><br>
            }

            @if (!Uploaded)
            {
                <div class="dropArea @dropClass">
                    Drag and Drop Screenshot or click to select file.
                    <InputFile disabled="@Uploading"
                               OnChange="OnInputFileChange"
                               @ondragenter="HandleDragEnter"
                               @ondragleave="HandleDragLeave" />
                </div>
            }
            <MudItem Style="margin: auto;">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="SubmitEntry">Submit</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
}
else
{
    <h3>Not logged in</h3>
}

@code {
    bool loggedIn;
    bool Uploaded = false;
    bool Uploading = false;

    string dropClass = string.Empty;

    string ImageFileName = "";
    string ImageUrl = "";

    public List<Character> characters = new List<Character>();
    public List<Stage> stages = new List<Stage>();
    public List<RunType> runTypes = new List<RunType>();

    public Entry entry = new Entry();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        loggedIn = user.Identity.IsAuthenticated;

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        characters = await _context.Characters.OrderBy(o => o.Name).ToListAsync();
        stages = await _context.Stages.ToListAsync();
        runTypes = await _context.RunTypes.ToListAsync();
    }

    private async Task SubmitEntry()
    {
        if (entry.StageId == 0)
        {
            Snackbar.Add("Stage must be selected.", Severity.Error);
        }
        else if (entry.CharacterId == 0)
        {
            Snackbar.Add("Character must be selected.", Severity.Error);
        }
        //else if (entry.RunTypeId == 0)
        //{
        //    Snackbar.Add("Run Type must be selected.", Severity.Error);
        //}
        else
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            User chkUser = _context.Users.Where(w => w.UserKey == userId).FirstOrDefault();

            entry.DateSubmitted = DateTime.Now;
            entry.Approved = false;
            entry.UserId = chkUser.Id;
            entry.Image = ImageFileName;
            _context.Entries.Add(entry);
            await _context.SaveChangesAsync();
            Snackbar.Add("Entry has been submitted.", Severity.Success);
            entry = new Entry();
        }

    }

    void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }

    void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        dropClass = string.Empty;

        try
        {
            Uploading = true;
            await InvokeAsync(StateHasChanged);

            var format = "image/png";
            var resizedImageFile = await args.File.RequestImageFileAsync(format, 1280, 720);

            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            string justFileName = Path.GetFileNameWithoutExtension(args.File.Name);
            string newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}.png";
            string filename = $"{Environment.CurrentDirectory}\\files\\{newFileNameWithoutPath}";

            File.WriteAllBytes(filename, buffer);

            ImageFileName = newFileNameWithoutPath;
            ImageUrl = $"files/{newFileNameWithoutPath}";


            Uploading = false;
            Uploaded = true;
        }
        catch (Exception ex)
        {
            Uploading = false;
            await InvokeAsync(StateHasChanged);
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

}
